{"version":3,"sources":["components/FilterBar/FilterBar.module.scss","components/Header/Header.module.scss","components/Footer/Footer.module.scss","components/Header/Header.js","components/FilterBar/FilterBar.js","components/Event/EventCard.js","components/Event/EventList.js","components/Footer/Footer.js","config/constants.js","App.js","utils/api.js","serviceWorker.js","index.js"],"names":["module","exports","container","title","buttonSearch","Header","react_default","a","createElement","className","styles","FilterBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearch","_this$state","state","criteria","category","renderCategories","categories","map","key","id","value","name_localized","criteriaRef","React","createRef","categoryRef","_this2","reactstrap_es","xs","onChange","e","setState","target","type","name","placeholder","color","onClick","block","Component","defaultProps","EventCard","_this$props","text","image","url","length","substr","top","width","src","alt","href","EventList","renderEvents","events","event","Event_EventCard","logo","description","Footer","TOKEN","PATH_BASE","PATH_CATEGORIES","PATH_EVENTS","PARAM_LOCALE","App","data","searchTerms","loading","axios","method","concat","consts","headers","Accept","then","res","catch","error","console","log","components_Header_Header","components_FilterBar_FilterBar","Event_EventList","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,6BAAAC,MAAA,yBAAAC,aAAA,qDCAlBJ,EAAAC,QAAA,CAAkBC,UAAA,0BAAAC,MAAA,2CCAlBH,EAAAC,QAAA,CAAkBC,UAAA,0BAAAC,MAAA,+NCYHE,EARA,WACb,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOR,WACxBI,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,IAAOP,OAAtB,qCCHAQ,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAURQ,SAAW,WAAM,IAAAC,EACgBR,EAAKS,MAA5BC,EADOF,EACPE,SAAUC,EADHH,EACGG,SAClBX,EAAKD,MAAMQ,SAAS,CAAEG,WAAUC,cAbfX,EAgBnBY,iBAAmB,WAGjB,OAFuBZ,EAAKD,MAApBc,WAEUC,IAAI,SAAAH,GAAQ,OAC5BlB,EAAAC,EAAAC,cAAA,UAAQoB,IAAKJ,EAASK,GAAIC,MAAON,EAASK,IACvCL,EAASO,mBAlBdlB,EAAKS,MAAQ,CACXC,SAAU,GACVC,SAAU,GAEZX,EAAKmB,YAAcC,IAAMC,YACzBrB,EAAKsB,YAAcF,IAAMC,YARRrB,wEA0BV,IAAAuB,EAAApB,KACP,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOR,WACrBI,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAOP,OAArB,+BACAG,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKC,GAAG,KACNhC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEE,SAAU,SAAAC,GAAC,OAAIJ,EAAKK,SAAS,CAAElB,SAAUiB,EAAEE,OAAOZ,SAClDa,KAAK,OACLlC,UAAU,YACVmC,KAAK,aACLC,YAAY,eAIlBvC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKC,GAAG,KACNhC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEE,SAAU,SAAAC,GAAC,OAAIJ,EAAKK,SAAS,CAAEjB,SAAUgB,EAAEE,OAAOZ,SAClDa,KAAK,SACLlC,UAAU,YACVmC,KAAK,WACLC,YAAY,gBAEZvC,EAAAC,EAAAC,cAAA,UAAQsB,MAAO,GAAf,gBACCd,KAAKS,sBAIZnB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKC,GAAG,KACNhC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAQS,MAAM,UAAUC,QAAS/B,KAAKI,SAAUX,UAAWC,IAAON,aAAc4C,OAAK,GAArF,sBA5DQC,aA6ExBtC,EAAUuC,aAAe,CACvBxB,WAAY,IAGCf,QClFTwC,mLACK,IAAAC,EAC2BpC,KAAKJ,MAAjCyC,EADCD,EACDC,KAAMlD,EADLiD,EACKjD,MAAOmD,EADZF,EACYE,MAAOC,EADnBH,EACmBG,IAO1B,OALIF,GACEA,EAAKG,OAAS,MAChBH,EAAOA,EAAKI,OAAO,EAAG,MAIxBnD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAM5B,UAAU,aACH,OAAV6C,EAAiBhD,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAASqB,KAAG,EAACC,MAAM,OAAOC,IAAKN,EAAMC,IAAKM,IAAK1D,EAAOM,UAAU,cAAiB,GACnGH,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KAAYrB,KAAKJ,MAAMT,OACvBG,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACGgB,EADH,OAIA/C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAyBqD,KAAMP,EAAKb,OAAO,UAAxD,mCAnBYO,aAmCxBE,EAAUD,aAAe,CACvBI,MAAO,MAGMH,QCZAY,6MAzBbC,aAAe,WAEb,OADmBnD,EAAKD,MAAhBqD,OACMtC,IAAI,SAAAuC,GAChB,OAAKA,EAAMtB,KAGTtC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAKC,GAAG,IAAI7B,UAAU,QACpBH,EAAAC,EAAAC,cAAC2D,EAAD,CAAWb,MAAOY,EAAME,KAAMjE,MAAO+D,EAAMtB,KAAKS,KAAMA,KAAMa,EAAMG,YAAYhB,KAAME,IAAKW,EAAMX,OAJ3E,gFAU1B,OACEjD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KAAMrB,KAAKgD,wBAhBKf,8BCMTqB,EARA,WACb,OACEhE,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOR,WACxBI,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAOP,OAArB,sDCNOoE,EAAQ,uBACRC,EAAY,mCACZC,EAAkB,cAClBC,EAAc,iBACdC,EAAe,mBC6DbC,cAxDb,SAAAA,EAAYhE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4D,IACjB/D,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8D,GAAAzD,KAAAH,KAAMJ,KAqBRQ,SAAW,SAAAyD,GClBN,IAAmBC,EDmBtBjE,EAAK4B,SAAS,CACZsC,SAAS,KCpBWD,EDuBZD,ECtBLG,IAAM,CACXC,OAAQ,MACR1B,IAAG,GAAA2B,OAAKC,GAALD,OAAwBC,EAAxB,YAAAD,OAAqDC,EAArD,OAAAD,OAAuEJ,EAAYvD,SAAnF,gBAAA2D,OACDJ,EAAYtD,SADX,KAAA0D,OAECC,GACJC,QAAS,CACPC,OAAQ,uBDiBPC,KAAK,SAAAC,GACJ1E,EAAK4B,SAAS,CACZwB,OAAQsB,EAAIV,KAAKZ,OACjBc,SAAS,MAGZS,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAhChB5E,EAAKS,MAAQ,CACXI,WAAY,GACZuC,OAAQ,GACRc,SAAS,GANMlE,mFAUC,IAAAuB,EAAApB,KCfbgE,IAAM,CACXC,OAAQ,MACR1B,IAAG,GAAA2B,OAAKC,GAALD,OAAwBC,EAAxB,YAAAD,OAAyDC,EAAzD,KAAAD,OAAyEC,GAC5EC,QAAS,CACPC,OAAQ,sBDaPC,KAAK,SAAAC,GACJnD,EAAKK,SAAS,CACZf,WAAY6D,EAAIV,KAAKnD,eAGxB8D,MAAM,SAAAC,GACLC,QAAQC,IAAIF,sCAqBT,IAAApE,EACiCL,KAAKM,MAArCI,EADDL,EACCK,WAAYuC,EADb5C,EACa4C,OAAQc,EADrB1D,EACqB0D,QAE5B,OACEzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoF,EAAD,CAAQzF,MAAM,YACdG,EAAAC,EAAAC,cAACqF,EAAD,CAAWnE,WAAYA,EAAYN,SAAUJ,KAAKI,WAClDd,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CAAW5B,UAAU,aAClBsE,EAAUzE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,uBAAqDH,EAAAC,EAAAC,cAACsF,EAAD,CAAW7B,OAAQA,KAGrF3D,EAAAC,EAAAC,cAACuF,EAAD,cAnDU9C,aEIE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.fa0e7b86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterBar_container__1ezQz\",\"title\":\"FilterBar_title__XkeyZ\",\"buttonSearch\":\"FilterBar_buttonSearch__nmxIf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__BJkc7\",\"title\":\"Header_title__2SmPY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Footer_container__3HDQd\",\"title\":\"Footer_title__3wFON\"};","import React from 'react';\nimport styles from './Header.module.scss';\n\n// Dumb component / Componente de presentación\n// No tiene estado\nconst Header = () => {\n  return (\n    <header className={styles.container}>\n      <h1 className={styles.title}>Eventos</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport styles from './FilterBar.module.scss';\nimport { Container, Row, Col, Button, Form, FormGroup, Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nclass FilterBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      criteria: '',\n      category: 0,\n    };\n    this.criteriaRef = React.createRef();\n    this.categoryRef = React.createRef();\n  }\n\n  onSearch = () => {\n    const { criteria, category } = this.state;\n    this.props.onSearch({ criteria, category });\n  };\n\n  renderCategories = () => {\n    const { categories } = this.props;\n\n    return categories.map(category => (\n      <option key={category.id} value={category.id}>\n        {category.name_localized}\n      </option>\n    ));\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <p className={styles.title}>Busca tus eventos favoritos</p>\n        <Container>\n          <Form>\n            <Row>\n              <Col xs=\"4\">\n                <FormGroup>\n                  <Input\n                    onChange={e => this.setState({ criteria: e.target.value })}\n                    type=\"text\"\n                    className=\"rounded-0\"\n                    name=\"searchText\"\n                    placeholder=\"Criterio\"\n                  />\n                </FormGroup>\n              </Col>\n              <Col xs=\"4\">\n                <FormGroup>\n                  <Input\n                    onChange={e => this.setState({ category: e.target.value })}\n                    type=\"select\"\n                    className=\"rounded-0\"\n                    name=\"category\"\n                    placeholder=\"Categoría\"\n                  >\n                    <option value={0}>Categoría</option>\n                    {this.renderCategories()}\n                  </Input>\n                </FormGroup>\n              </Col>\n              <Col xs=\"4\">\n                <Button color=\"primary\" onClick={this.onSearch} className={styles.buttonSearch} block>\n                  BUSCAR\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Container>\n      </div>\n    );\n  }\n}\n\nFilterBar.propTypes = {\n  categories: PropTypes.array.isRequired,\n  onSearch: PropTypes.func,\n};\n\nFilterBar.defaultProps = {\n  categories: [],\n};\n\nexport default FilterBar;\n","import React, { Component } from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nclass EventCard extends Component {\n  render() {\n    let { text, title, image, url } = this.props;\n\n    if (text) {\n      if (text.length > 250) {\n        text = text.substr(0, 250);\n      }\n    }\n    return (\n      <div>\n        <Card className=\"rounded-0\">\n          {image !== null ? <CardImg top width=\"100%\" src={image.url} alt={title} className=\"rounded-0\" /> : ''}\n          <CardBody>\n            <CardTitle>{this.props.title}</CardTitle>\n            <CardText>\n              {text}\n              ...\n            </CardText>\n            <a className=\"btn btn-info btn-block\" href={url} target=\"_bkank\">\n              MÁS INFORMACIÓN\n            </a>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n}\n\nEventCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  image: PropTypes.string,\n};\n\nEventCard.defaultProps = {\n  image: null,\n};\n\nexport default EventCard;\n","import React, { Component } from 'react';\nimport { Col, Row } from 'reactstrap';\nimport EventCard from './EventCard';\nimport { PropTypes } from 'prop-types';\n\nclass EventList extends Component {\n  renderEvents = () => {\n    const { events } = this.props;\n    return events.map(event => {\n      if (!event.name) return null;\n\n      return (\n        <Col xs=\"4\" className=\"mb-4\">\n          <EventCard image={event.logo} title={event.name.text} text={event.description.text} url={event.url} />\n        </Col>\n      );\n    });\n  };\n  render() {\n    return (\n      <div>\n        <Row>{this.renderEvents()}</Row>\n      </div>\n    );\n  }\n}\n\nEventList.propTypes = {\n  events: PropTypes.array.isRequired,\n};\n\nexport default EventList;\n","import React from 'react';\nimport styles from './Footer.module.scss';\n\nconst Footer = () => {\n  return (\n    <footer className={styles.container}>\n      <p className={styles.title}>Devhack - Workshop Reactjs 2018</p>\n    </footer>\n  );\n};\n\nexport default Footer;\n","export const TOKEN = 'UHAUFA22CQ2BM72V6HER';\nexport const PATH_BASE = 'https://www.eventbriteapi.com/v3';\nexport const PATH_CATEGORIES = '/categories';\nexport const PATH_EVENTS = '/events/search';\nexport const PARAM_LOCALE = 'locale=es_ES';\n","import React, { Component } from 'react';\nimport Header from './components/Header/Header';\nimport FilterBar from './components/FilterBar/FilterBar';\nimport EventList from './components/Event/EventList';\nimport { Container } from 'reactstrap';\nimport Footer from './components/Footer/Footer';\nimport { getCategories, getEvents } from './utils/api';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      categories: [],\n      events: [],\n      loading: false,\n    };\n  }\n\n  componentDidMount() {\n    getCategories()\n      .then(res => {\n        this.setState({\n          categories: res.data.categories,\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  onSearch = data => {\n    this.setState({\n      loading: true,\n    });\n\n    getEvents(data)\n      .then(res => {\n        this.setState({\n          events: res.data.events,\n          loading: false,\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    const { categories, events, loading } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Header title=\"Eventos\" />\n        <FilterBar categories={categories} onSearch={this.onSearch} />\n        <Container className=\"pt-4 mb-4\">\n          {loading ? <p className=\"text-center\">Buscando Eventos...</p> : <EventList events={events} />}\n        </Container>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import axios from 'axios';\nimport * as consts from '../config/constants';\n\nexport function getCategories() {\n  return axios({\n    method: 'get',\n    url: `${consts.PATH_BASE}${consts.PATH_CATEGORIES}/?token=${consts.TOKEN}&${consts.PARAM_LOCALE}`,\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n}\n\nexport function getEvents(searchTerms) {\n  return axios({\n    method: 'get',\n    url: `${consts.PATH_BASE}${consts.PATH_EVENTS}/?token=${consts.TOKEN}&q=${searchTerms.criteria}&categories=${\n      searchTerms.category\n    }&${consts.PARAM_LOCALE}`,\n    headers: {\n      Accept: 'application/json',\n    },\n  });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}